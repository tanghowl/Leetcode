"""考题3：
标题：在字符串中找出连续最长的数字串(含"+-"号) | 时间限制：1秒 | 内存限制：65536K | 语言限制： 不限
【在字符串中找出连续最长的数字串(含"+-"号)】请在一个字符串中找出连续最长的数字串，并返回这个数字串；如果存在长度相同的连续数字串，返回最后一个。
注意：数字串可以由数字“0~9”、小数点“.”、正负号“+-”组成，长度包括组成数字串的所有符号。“.”、“+-”仅能出现1次，“.”的两边必须是数字，“+-”仅能出现在开头且
其后必须要有数字，比如：
“123”、“12.3”、“+1.23”、“+001”、“-2.3”都是合法的数字串；
“123.”、“.123”、“+.1”、“-2.”都是不合法的数字串。
输入描述：
字符串输入为ASCII编码，长度不定，可能含有空格，请读取完整一行作为输入字符串
输出描述：
如果没有符合条件的数字串，返回空字符串""

示例1：
输入
1234567890abcd9.+12345.678.9ed
输出
+12345.678
"""

import re


class Solution:
    def out(self, strs: str) -> int:
        num_pat = re.compile(r'[+-]?[0-9]+\.?[0-9]+|[+-]?[0-9]')
        string = strs.strip()
        match_num = num_pat.findall(string)
        if match_num:
            result = match_num[-1]
        else:
            result = ''
        return result


if __name__ == '__main__':
    strings = '+1'
    s = Solution()
    print(s.out(strings))
